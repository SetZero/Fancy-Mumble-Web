/* eslint-disable */
// source: src/protos/Mumble.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.MumbleProto.ACL', null, global);
goog.exportSymbol('proto.MumbleProto.ACL.ChanACL', null, global);
goog.exportSymbol('proto.MumbleProto.ACL.ChanGroup', null, global);
goog.exportSymbol('proto.MumbleProto.Authenticate', null, global);
goog.exportSymbol('proto.MumbleProto.BanList', null, global);
goog.exportSymbol('proto.MumbleProto.BanList.BanEntry', null, global);
goog.exportSymbol('proto.MumbleProto.ChannelRemove', null, global);
goog.exportSymbol('proto.MumbleProto.ChannelState', null, global);
goog.exportSymbol('proto.MumbleProto.CodecVersion', null, global);
goog.exportSymbol('proto.MumbleProto.ContextAction', null, global);
goog.exportSymbol('proto.MumbleProto.ContextActionModify', null, global);
goog.exportSymbol('proto.MumbleProto.ContextActionModify.Context', null, global);
goog.exportSymbol('proto.MumbleProto.ContextActionModify.Operation', null, global);
goog.exportSymbol('proto.MumbleProto.CryptSetup', null, global);
goog.exportSymbol('proto.MumbleProto.PermissionDenied', null, global);
goog.exportSymbol('proto.MumbleProto.PermissionDenied.DenyType', null, global);
goog.exportSymbol('proto.MumbleProto.PermissionQuery', null, global);
goog.exportSymbol('proto.MumbleProto.Ping', null, global);
goog.exportSymbol('proto.MumbleProto.QueryUsers', null, global);
goog.exportSymbol('proto.MumbleProto.Reject', null, global);
goog.exportSymbol('proto.MumbleProto.Reject.RejectType', null, global);
goog.exportSymbol('proto.MumbleProto.RequestBlob', null, global);
goog.exportSymbol('proto.MumbleProto.ServerConfig', null, global);
goog.exportSymbol('proto.MumbleProto.ServerSync', null, global);
goog.exportSymbol('proto.MumbleProto.SuggestConfig', null, global);
goog.exportSymbol('proto.MumbleProto.TextMessage', null, global);
goog.exportSymbol('proto.MumbleProto.UDPTunnel', null, global);
goog.exportSymbol('proto.MumbleProto.UserList', null, global);
goog.exportSymbol('proto.MumbleProto.UserList.User', null, global);
goog.exportSymbol('proto.MumbleProto.UserRemove', null, global);
goog.exportSymbol('proto.MumbleProto.UserState', null, global);
goog.exportSymbol('proto.MumbleProto.UserStats', null, global);
goog.exportSymbol('proto.MumbleProto.UserStats.Stats', null, global);
goog.exportSymbol('proto.MumbleProto.Version', null, global);
goog.exportSymbol('proto.MumbleProto.VoiceTarget', null, global);
goog.exportSymbol('proto.MumbleProto.VoiceTarget.Target', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.Version = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.Version, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.Version.displayName = 'proto.MumbleProto.Version';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.UDPTunnel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.UDPTunnel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.UDPTunnel.displayName = 'proto.MumbleProto.UDPTunnel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.Authenticate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MumbleProto.Authenticate.repeatedFields_, null);
};
goog.inherits(proto.MumbleProto.Authenticate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.Authenticate.displayName = 'proto.MumbleProto.Authenticate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.Ping.displayName = 'proto.MumbleProto.Ping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.Reject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.Reject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.Reject.displayName = 'proto.MumbleProto.Reject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.ServerSync = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.ServerSync, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.ServerSync.displayName = 'proto.MumbleProto.ServerSync';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.ChannelRemove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.ChannelRemove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.ChannelRemove.displayName = 'proto.MumbleProto.ChannelRemove';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.ChannelState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MumbleProto.ChannelState.repeatedFields_, null);
};
goog.inherits(proto.MumbleProto.ChannelState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.ChannelState.displayName = 'proto.MumbleProto.ChannelState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.UserRemove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.UserRemove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.UserRemove.displayName = 'proto.MumbleProto.UserRemove';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.UserState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.UserState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.UserState.displayName = 'proto.MumbleProto.UserState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.BanList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MumbleProto.BanList.repeatedFields_, null);
};
goog.inherits(proto.MumbleProto.BanList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.BanList.displayName = 'proto.MumbleProto.BanList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.BanList.BanEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.BanList.BanEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.BanList.BanEntry.displayName = 'proto.MumbleProto.BanList.BanEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.TextMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MumbleProto.TextMessage.repeatedFields_, null);
};
goog.inherits(proto.MumbleProto.TextMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.TextMessage.displayName = 'proto.MumbleProto.TextMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.PermissionDenied = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.PermissionDenied, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.PermissionDenied.displayName = 'proto.MumbleProto.PermissionDenied';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.ACL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MumbleProto.ACL.repeatedFields_, null);
};
goog.inherits(proto.MumbleProto.ACL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.ACL.displayName = 'proto.MumbleProto.ACL';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.ACL.ChanGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MumbleProto.ACL.ChanGroup.repeatedFields_, null);
};
goog.inherits(proto.MumbleProto.ACL.ChanGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.ACL.ChanGroup.displayName = 'proto.MumbleProto.ACL.ChanGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.ACL.ChanACL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.ACL.ChanACL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.ACL.ChanACL.displayName = 'proto.MumbleProto.ACL.ChanACL';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.QueryUsers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MumbleProto.QueryUsers.repeatedFields_, null);
};
goog.inherits(proto.MumbleProto.QueryUsers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.QueryUsers.displayName = 'proto.MumbleProto.QueryUsers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.CryptSetup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.CryptSetup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.CryptSetup.displayName = 'proto.MumbleProto.CryptSetup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.ContextActionModify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.ContextActionModify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.ContextActionModify.displayName = 'proto.MumbleProto.ContextActionModify';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.ContextAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.ContextAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.ContextAction.displayName = 'proto.MumbleProto.ContextAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.UserList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MumbleProto.UserList.repeatedFields_, null);
};
goog.inherits(proto.MumbleProto.UserList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.UserList.displayName = 'proto.MumbleProto.UserList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.UserList.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.UserList.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.UserList.User.displayName = 'proto.MumbleProto.UserList.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.VoiceTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MumbleProto.VoiceTarget.repeatedFields_, null);
};
goog.inherits(proto.MumbleProto.VoiceTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.VoiceTarget.displayName = 'proto.MumbleProto.VoiceTarget';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.VoiceTarget.Target = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MumbleProto.VoiceTarget.Target.repeatedFields_, null);
};
goog.inherits(proto.MumbleProto.VoiceTarget.Target, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.VoiceTarget.Target.displayName = 'proto.MumbleProto.VoiceTarget.Target';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.PermissionQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.PermissionQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.PermissionQuery.displayName = 'proto.MumbleProto.PermissionQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.CodecVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.CodecVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.CodecVersion.displayName = 'proto.MumbleProto.CodecVersion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.UserStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MumbleProto.UserStats.repeatedFields_, null);
};
goog.inherits(proto.MumbleProto.UserStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.UserStats.displayName = 'proto.MumbleProto.UserStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.UserStats.Stats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.UserStats.Stats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.UserStats.Stats.displayName = 'proto.MumbleProto.UserStats.Stats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.RequestBlob = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MumbleProto.RequestBlob.repeatedFields_, null);
};
goog.inherits(proto.MumbleProto.RequestBlob, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.RequestBlob.displayName = 'proto.MumbleProto.RequestBlob';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.ServerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.ServerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.ServerConfig.displayName = 'proto.MumbleProto.ServerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MumbleProto.SuggestConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MumbleProto.SuggestConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MumbleProto.SuggestConfig.displayName = 'proto.MumbleProto.SuggestConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.Version.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.Version.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.Version} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.Version.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    release: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    os: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    osVersion: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.Version}
 */
proto.MumbleProto.Version.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.Version;
  return proto.MumbleProto.Version.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.Version}
 */
proto.MumbleProto.Version.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelease(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.Version.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.Version.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.Version} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.Version.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.MumbleProto.Version.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.Version} returns this
 */
proto.MumbleProto.Version.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Version} returns this
 */
proto.MumbleProto.Version.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Version.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string release = 2;
 * @return {string}
 */
proto.MumbleProto.Version.prototype.getRelease = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.Version} returns this
 */
proto.MumbleProto.Version.prototype.setRelease = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Version} returns this
 */
proto.MumbleProto.Version.prototype.clearRelease = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Version.prototype.hasRelease = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string os = 3;
 * @return {string}
 */
proto.MumbleProto.Version.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.Version} returns this
 */
proto.MumbleProto.Version.prototype.setOs = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Version} returns this
 */
proto.MumbleProto.Version.prototype.clearOs = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Version.prototype.hasOs = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string os_version = 4;
 * @return {string}
 */
proto.MumbleProto.Version.prototype.getOsVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.Version} returns this
 */
proto.MumbleProto.Version.prototype.setOsVersion = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Version} returns this
 */
proto.MumbleProto.Version.prototype.clearOsVersion = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Version.prototype.hasOsVersion = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.UDPTunnel.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.UDPTunnel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.UDPTunnel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.UDPTunnel.toObject = function(includeInstance, msg) {
  var f, obj = {
    packet: msg.getPacket_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.UDPTunnel}
 */
proto.MumbleProto.UDPTunnel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.UDPTunnel;
  return proto.MumbleProto.UDPTunnel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.UDPTunnel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.UDPTunnel}
 */
proto.MumbleProto.UDPTunnel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPacket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.UDPTunnel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.UDPTunnel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.UDPTunnel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.UDPTunnel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * required bytes packet = 1;
 * @return {!(string|Uint8Array)}
 */
proto.MumbleProto.UDPTunnel.prototype.getPacket = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes packet = 1;
 * This is a type-conversion wrapper around `getPacket()`
 * @return {string}
 */
proto.MumbleProto.UDPTunnel.prototype.getPacket_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPacket()));
};


/**
 * required bytes packet = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPacket()`
 * @return {!Uint8Array}
 */
proto.MumbleProto.UDPTunnel.prototype.getPacket_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPacket()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MumbleProto.UDPTunnel} returns this
 */
proto.MumbleProto.UDPTunnel.prototype.setPacket = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UDPTunnel} returns this
 */
proto.MumbleProto.UDPTunnel.prototype.clearPacket = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UDPTunnel.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MumbleProto.Authenticate.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.Authenticate.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.Authenticate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.Authenticate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.Authenticate.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    password: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    tokensList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    celtVersionsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    opus: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.Authenticate}
 */
proto.MumbleProto.Authenticate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.Authenticate;
  return proto.MumbleProto.Authenticate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.Authenticate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.Authenticate}
 */
proto.MumbleProto.Authenticate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTokens(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addCeltVersions(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOpus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.Authenticate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.Authenticate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.Authenticate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.Authenticate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTokensList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getCeltVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.MumbleProto.Authenticate.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.Authenticate} returns this
 */
proto.MumbleProto.Authenticate.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Authenticate} returns this
 */
proto.MumbleProto.Authenticate.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Authenticate.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.MumbleProto.Authenticate.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.Authenticate} returns this
 */
proto.MumbleProto.Authenticate.prototype.setPassword = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Authenticate} returns this
 */
proto.MumbleProto.Authenticate.prototype.clearPassword = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Authenticate.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string tokens = 3;
 * @return {!Array<string>}
 */
proto.MumbleProto.Authenticate.prototype.getTokensList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.MumbleProto.Authenticate} returns this
 */
proto.MumbleProto.Authenticate.prototype.setTokensList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.Authenticate} returns this
 */
proto.MumbleProto.Authenticate.prototype.addTokens = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.Authenticate} returns this
 */
proto.MumbleProto.Authenticate.prototype.clearTokensList = function() {
  return this.setTokensList([]);
};


/**
 * repeated int32 celt_versions = 4;
 * @return {!Array<number>}
 */
proto.MumbleProto.Authenticate.prototype.getCeltVersionsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.Authenticate} returns this
 */
proto.MumbleProto.Authenticate.prototype.setCeltVersionsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.Authenticate} returns this
 */
proto.MumbleProto.Authenticate.prototype.addCeltVersions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.Authenticate} returns this
 */
proto.MumbleProto.Authenticate.prototype.clearCeltVersionsList = function() {
  return this.setCeltVersionsList([]);
};


/**
 * optional bool opus = 5;
 * @return {boolean}
 */
proto.MumbleProto.Authenticate.prototype.getOpus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.Authenticate} returns this
 */
proto.MumbleProto.Authenticate.prototype.setOpus = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Authenticate} returns this
 */
proto.MumbleProto.Authenticate.prototype.clearOpus = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Authenticate.prototype.hasOpus = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    good: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    late: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    lost: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    resync: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    udpPackets: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    tcpPackets: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    udpPingAvg: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    udpPingVar: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    tcpPingAvg: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    tcpPingVar: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.Ping}
 */
proto.MumbleProto.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.Ping;
  return proto.MumbleProto.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.Ping}
 */
proto.MumbleProto.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGood(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLost(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResync(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUdpPackets(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpPackets(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUdpPingAvg(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUdpPingVar(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTcpPingAvg(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTcpPingVar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
};


/**
 * optional uint64 timestamp = 1;
 * @return {number}
 */
proto.MumbleProto.Ping.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Ping.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 good = 2;
 * @return {number}
 */
proto.MumbleProto.Ping.prototype.getGood = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.setGood = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.clearGood = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Ping.prototype.hasGood = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 late = 3;
 * @return {number}
 */
proto.MumbleProto.Ping.prototype.getLate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.setLate = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.clearLate = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Ping.prototype.hasLate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 lost = 4;
 * @return {number}
 */
proto.MumbleProto.Ping.prototype.getLost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.setLost = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.clearLost = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Ping.prototype.hasLost = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 resync = 5;
 * @return {number}
 */
proto.MumbleProto.Ping.prototype.getResync = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.setResync = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.clearResync = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Ping.prototype.hasResync = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 udp_packets = 6;
 * @return {number}
 */
proto.MumbleProto.Ping.prototype.getUdpPackets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.setUdpPackets = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.clearUdpPackets = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Ping.prototype.hasUdpPackets = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 tcp_packets = 7;
 * @return {number}
 */
proto.MumbleProto.Ping.prototype.getTcpPackets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.setTcpPackets = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.clearTcpPackets = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Ping.prototype.hasTcpPackets = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float udp_ping_avg = 8;
 * @return {number}
 */
proto.MumbleProto.Ping.prototype.getUdpPingAvg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.setUdpPingAvg = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.clearUdpPingAvg = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Ping.prototype.hasUdpPingAvg = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float udp_ping_var = 9;
 * @return {number}
 */
proto.MumbleProto.Ping.prototype.getUdpPingVar = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.setUdpPingVar = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.clearUdpPingVar = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Ping.prototype.hasUdpPingVar = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float tcp_ping_avg = 10;
 * @return {number}
 */
proto.MumbleProto.Ping.prototype.getTcpPingAvg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.setTcpPingAvg = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.clearTcpPingAvg = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Ping.prototype.hasTcpPingAvg = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float tcp_ping_var = 11;
 * @return {number}
 */
proto.MumbleProto.Ping.prototype.getTcpPingVar = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.setTcpPingVar = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Ping} returns this
 */
proto.MumbleProto.Ping.prototype.clearTcpPingVar = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Ping.prototype.hasTcpPingVar = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.Reject.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.Reject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.Reject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.Reject.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    reason: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.Reject}
 */
proto.MumbleProto.Reject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.Reject;
  return proto.MumbleProto.Reject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.Reject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.Reject}
 */
proto.MumbleProto.Reject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MumbleProto.Reject.RejectType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.Reject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.Reject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.Reject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.Reject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.MumbleProto.Reject.RejectType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.MumbleProto.Reject.RejectType = {
  NONE: 0,
  WRONGVERSION: 1,
  INVALIDUSERNAME: 2,
  WRONGUSERPW: 3,
  WRONGSERVERPW: 4,
  USERNAMEINUSE: 5,
  SERVERFULL: 6,
  NOCERTIFICATE: 7,
  AUTHENTICATORFAIL: 8
};

/**
 * optional RejectType type = 1;
 * @return {!proto.MumbleProto.Reject.RejectType}
 */
proto.MumbleProto.Reject.prototype.getType = function() {
  return /** @type {!proto.MumbleProto.Reject.RejectType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.MumbleProto.Reject.RejectType} value
 * @return {!proto.MumbleProto.Reject} returns this
 */
proto.MumbleProto.Reject.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Reject} returns this
 */
proto.MumbleProto.Reject.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Reject.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.MumbleProto.Reject.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.Reject} returns this
 */
proto.MumbleProto.Reject.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.Reject} returns this
 */
proto.MumbleProto.Reject.prototype.clearReason = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.Reject.prototype.hasReason = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.ServerSync.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.ServerSync.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.ServerSync} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ServerSync.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    maxBandwidth: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    welcomeText: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    permissions: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.ServerSync}
 */
proto.MumbleProto.ServerSync.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.ServerSync;
  return proto.MumbleProto.ServerSync.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.ServerSync} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.ServerSync}
 */
proto.MumbleProto.ServerSync.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSession(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxBandwidth(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWelcomeText(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPermissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.ServerSync.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.ServerSync.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.ServerSync} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ServerSync.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint32 session = 1;
 * @return {number}
 */
proto.MumbleProto.ServerSync.prototype.getSession = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ServerSync} returns this
 */
proto.MumbleProto.ServerSync.prototype.setSession = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ServerSync} returns this
 */
proto.MumbleProto.ServerSync.prototype.clearSession = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ServerSync.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 max_bandwidth = 2;
 * @return {number}
 */
proto.MumbleProto.ServerSync.prototype.getMaxBandwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ServerSync} returns this
 */
proto.MumbleProto.ServerSync.prototype.setMaxBandwidth = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ServerSync} returns this
 */
proto.MumbleProto.ServerSync.prototype.clearMaxBandwidth = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ServerSync.prototype.hasMaxBandwidth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string welcome_text = 3;
 * @return {string}
 */
proto.MumbleProto.ServerSync.prototype.getWelcomeText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.ServerSync} returns this
 */
proto.MumbleProto.ServerSync.prototype.setWelcomeText = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ServerSync} returns this
 */
proto.MumbleProto.ServerSync.prototype.clearWelcomeText = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ServerSync.prototype.hasWelcomeText = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 permissions = 4;
 * @return {number}
 */
proto.MumbleProto.ServerSync.prototype.getPermissions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ServerSync} returns this
 */
proto.MumbleProto.ServerSync.prototype.setPermissions = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ServerSync} returns this
 */
proto.MumbleProto.ServerSync.prototype.clearPermissions = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ServerSync.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.ChannelRemove.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.ChannelRemove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.ChannelRemove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ChannelRemove.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.ChannelRemove}
 */
proto.MumbleProto.ChannelRemove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.ChannelRemove;
  return proto.MumbleProto.ChannelRemove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.ChannelRemove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.ChannelRemove}
 */
proto.MumbleProto.ChannelRemove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.ChannelRemove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.ChannelRemove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.ChannelRemove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ChannelRemove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 channel_id = 1;
 * @return {number}
 */
proto.MumbleProto.ChannelRemove.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ChannelRemove} returns this
 */
proto.MumbleProto.ChannelRemove.prototype.setChannelId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ChannelRemove} returns this
 */
proto.MumbleProto.ChannelRemove.prototype.clearChannelId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ChannelRemove.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MumbleProto.ChannelState.repeatedFields_ = [4,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.ChannelState.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.ChannelState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.ChannelState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ChannelState.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    parent: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    linksList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    description: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    linksAddList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    linksRemoveList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    temporary: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    position: jspb.Message.getFieldWithDefault(msg, 9, 0),
    descriptionHash: msg.getDescriptionHash_asB64(),
    maxUsers: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.ChannelState}
 */
proto.MumbleProto.ChannelState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.ChannelState;
  return proto.MumbleProto.ChannelState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.ChannelState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.ChannelState}
 */
proto.MumbleProto.ChannelState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setParent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addLinks(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addLinksAdd(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addLinksRemove(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTemporary(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDescriptionHash(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.ChannelState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.ChannelState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.ChannelState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ChannelState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLinksList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLinksAddList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      6,
      f
    );
  }
  f = message.getLinksRemoveList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
};


/**
 * optional uint32 channel_id = 1;
 * @return {number}
 */
proto.MumbleProto.ChannelState.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.setChannelId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.clearChannelId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ChannelState.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 parent = 2;
 * @return {number}
 */
proto.MumbleProto.ChannelState.prototype.getParent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.setParent = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.clearParent = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ChannelState.prototype.hasParent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.MumbleProto.ChannelState.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ChannelState.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated uint32 links = 4;
 * @return {!Array<number>}
 */
proto.MumbleProto.ChannelState.prototype.getLinksList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.setLinksList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.addLinks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.clearLinksList = function() {
  return this.setLinksList([]);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.MumbleProto.ChannelState.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ChannelState.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated uint32 links_add = 6;
 * @return {!Array<number>}
 */
proto.MumbleProto.ChannelState.prototype.getLinksAddList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.setLinksAddList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.addLinksAdd = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.clearLinksAddList = function() {
  return this.setLinksAddList([]);
};


/**
 * repeated uint32 links_remove = 7;
 * @return {!Array<number>}
 */
proto.MumbleProto.ChannelState.prototype.getLinksRemoveList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.setLinksRemoveList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.addLinksRemove = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.clearLinksRemoveList = function() {
  return this.setLinksRemoveList([]);
};


/**
 * optional bool temporary = 8;
 * @return {boolean}
 */
proto.MumbleProto.ChannelState.prototype.getTemporary = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.setTemporary = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.clearTemporary = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ChannelState.prototype.hasTemporary = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 position = 9;
 * @return {number}
 */
proto.MumbleProto.ChannelState.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.setPosition = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.clearPosition = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ChannelState.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bytes description_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.MumbleProto.ChannelState.prototype.getDescriptionHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes description_hash = 10;
 * This is a type-conversion wrapper around `getDescriptionHash()`
 * @return {string}
 */
proto.MumbleProto.ChannelState.prototype.getDescriptionHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDescriptionHash()));
};


/**
 * optional bytes description_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDescriptionHash()`
 * @return {!Uint8Array}
 */
proto.MumbleProto.ChannelState.prototype.getDescriptionHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDescriptionHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.setDescriptionHash = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.clearDescriptionHash = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ChannelState.prototype.hasDescriptionHash = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 max_users = 11;
 * @return {number}
 */
proto.MumbleProto.ChannelState.prototype.getMaxUsers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.setMaxUsers = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ChannelState} returns this
 */
proto.MumbleProto.ChannelState.prototype.clearMaxUsers = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ChannelState.prototype.hasMaxUsers = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.UserRemove.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.UserRemove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.UserRemove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.UserRemove.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    actor: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    reason: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    ban: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.UserRemove}
 */
proto.MumbleProto.UserRemove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.UserRemove;
  return proto.MumbleProto.UserRemove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.UserRemove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.UserRemove}
 */
proto.MumbleProto.UserRemove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSession(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.UserRemove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.UserRemove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.UserRemove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.UserRemove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * required uint32 session = 1;
 * @return {number}
 */
proto.MumbleProto.UserRemove.prototype.getSession = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserRemove} returns this
 */
proto.MumbleProto.UserRemove.prototype.setSession = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserRemove} returns this
 */
proto.MumbleProto.UserRemove.prototype.clearSession = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserRemove.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 actor = 2;
 * @return {number}
 */
proto.MumbleProto.UserRemove.prototype.getActor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserRemove} returns this
 */
proto.MumbleProto.UserRemove.prototype.setActor = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserRemove} returns this
 */
proto.MumbleProto.UserRemove.prototype.clearActor = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserRemove.prototype.hasActor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string reason = 3;
 * @return {string}
 */
proto.MumbleProto.UserRemove.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.UserRemove} returns this
 */
proto.MumbleProto.UserRemove.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserRemove} returns this
 */
proto.MumbleProto.UserRemove.prototype.clearReason = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserRemove.prototype.hasReason = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool ban = 4;
 * @return {boolean}
 */
proto.MumbleProto.UserRemove.prototype.getBan = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.UserRemove} returns this
 */
proto.MumbleProto.UserRemove.prototype.setBan = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserRemove} returns this
 */
proto.MumbleProto.UserRemove.prototype.clearBan = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserRemove.prototype.hasBan = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.UserState.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.UserState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.UserState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.UserState.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    actor: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    userId: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    channelId: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    mute: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
    deaf: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f,
    suppress: (f = jspb.Message.getBooleanField(msg, 8)) == null ? undefined : f,
    selfMute: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f,
    selfDeaf: (f = jspb.Message.getBooleanField(msg, 10)) == null ? undefined : f,
    texture: msg.getTexture_asB64(),
    pluginContext: msg.getPluginContext_asB64(),
    pluginIdentity: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    comment: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f,
    hash: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
    commentHash: msg.getCommentHash_asB64(),
    textureHash: msg.getTextureHash_asB64(),
    prioritySpeaker: (f = jspb.Message.getBooleanField(msg, 18)) == null ? undefined : f,
    recording: (f = jspb.Message.getBooleanField(msg, 19)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.UserState}
 */
proto.MumbleProto.UserState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.UserState;
  return proto.MumbleProto.UserState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.UserState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.UserState}
 */
proto.MumbleProto.UserState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSession(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelId(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMute(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeaf(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuppress(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSelfMute(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSelfDeaf(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTexture(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPluginContext(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPluginIdentity(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCommentHash(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTextureHash(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrioritySpeaker(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRecording(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.UserState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.UserState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.UserState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.UserState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeBool(
      19,
      f
    );
  }
};


/**
 * optional uint32 session = 1;
 * @return {number}
 */
proto.MumbleProto.UserState.prototype.getSession = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setSession = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearSession = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 actor = 2;
 * @return {number}
 */
proto.MumbleProto.UserState.prototype.getActor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setActor = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearActor = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasActor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.MumbleProto.UserState.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 user_id = 4;
 * @return {number}
 */
proto.MumbleProto.UserState.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setUserId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearUserId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 channel_id = 5;
 * @return {number}
 */
proto.MumbleProto.UserState.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setChannelId = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearChannelId = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool mute = 6;
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.getMute = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setMute = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearMute = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasMute = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool deaf = 7;
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.getDeaf = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setDeaf = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearDeaf = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasDeaf = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool suppress = 8;
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.getSuppress = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setSuppress = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearSuppress = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasSuppress = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool self_mute = 9;
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.getSelfMute = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setSelfMute = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearSelfMute = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasSelfMute = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool self_deaf = 10;
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.getSelfDeaf = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setSelfDeaf = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearSelfDeaf = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasSelfDeaf = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bytes texture = 11;
 * @return {!(string|Uint8Array)}
 */
proto.MumbleProto.UserState.prototype.getTexture = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes texture = 11;
 * This is a type-conversion wrapper around `getTexture()`
 * @return {string}
 */
proto.MumbleProto.UserState.prototype.getTexture_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTexture()));
};


/**
 * optional bytes texture = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTexture()`
 * @return {!Uint8Array}
 */
proto.MumbleProto.UserState.prototype.getTexture_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTexture()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setTexture = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearTexture = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasTexture = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bytes plugin_context = 12;
 * @return {!(string|Uint8Array)}
 */
proto.MumbleProto.UserState.prototype.getPluginContext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes plugin_context = 12;
 * This is a type-conversion wrapper around `getPluginContext()`
 * @return {string}
 */
proto.MumbleProto.UserState.prototype.getPluginContext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPluginContext()));
};


/**
 * optional bytes plugin_context = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPluginContext()`
 * @return {!Uint8Array}
 */
proto.MumbleProto.UserState.prototype.getPluginContext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPluginContext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setPluginContext = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearPluginContext = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasPluginContext = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string plugin_identity = 13;
 * @return {string}
 */
proto.MumbleProto.UserState.prototype.getPluginIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setPluginIdentity = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearPluginIdentity = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasPluginIdentity = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string comment = 14;
 * @return {string}
 */
proto.MumbleProto.UserState.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setComment = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearComment = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasComment = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string hash = 15;
 * @return {string}
 */
proto.MumbleProto.UserState.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setHash = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearHash = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasHash = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bytes comment_hash = 16;
 * @return {!(string|Uint8Array)}
 */
proto.MumbleProto.UserState.prototype.getCommentHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes comment_hash = 16;
 * This is a type-conversion wrapper around `getCommentHash()`
 * @return {string}
 */
proto.MumbleProto.UserState.prototype.getCommentHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCommentHash()));
};


/**
 * optional bytes comment_hash = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCommentHash()`
 * @return {!Uint8Array}
 */
proto.MumbleProto.UserState.prototype.getCommentHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCommentHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setCommentHash = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearCommentHash = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasCommentHash = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bytes texture_hash = 17;
 * @return {!(string|Uint8Array)}
 */
proto.MumbleProto.UserState.prototype.getTextureHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes texture_hash = 17;
 * This is a type-conversion wrapper around `getTextureHash()`
 * @return {string}
 */
proto.MumbleProto.UserState.prototype.getTextureHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTextureHash()));
};


/**
 * optional bytes texture_hash = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTextureHash()`
 * @return {!Uint8Array}
 */
proto.MumbleProto.UserState.prototype.getTextureHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTextureHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setTextureHash = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearTextureHash = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasTextureHash = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool priority_speaker = 18;
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.getPrioritySpeaker = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setPrioritySpeaker = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearPrioritySpeaker = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasPrioritySpeaker = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional bool recording = 19;
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.getRecording = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.setRecording = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserState} returns this
 */
proto.MumbleProto.UserState.prototype.clearRecording = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserState.prototype.hasRecording = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MumbleProto.BanList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.BanList.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.BanList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.BanList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.BanList.toObject = function(includeInstance, msg) {
  var f, obj = {
    bansList: jspb.Message.toObjectList(msg.getBansList(),
    proto.MumbleProto.BanList.BanEntry.toObject, includeInstance),
    query: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.BanList}
 */
proto.MumbleProto.BanList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.BanList;
  return proto.MumbleProto.BanList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.BanList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.BanList}
 */
proto.MumbleProto.BanList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MumbleProto.BanList.BanEntry;
      reader.readMessage(value,proto.MumbleProto.BanList.BanEntry.deserializeBinaryFromReader);
      msg.addBans(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.BanList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.BanList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.BanList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.BanList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MumbleProto.BanList.BanEntry.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.BanList.BanEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.BanList.BanEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.BanList.BanEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.BanList.BanEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    mask: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    hash: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    reason: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    start: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    duration: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.BanList.BanEntry}
 */
proto.MumbleProto.BanList.BanEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.BanList.BanEntry;
  return proto.MumbleProto.BanList.BanEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.BanList.BanEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.BanList.BanEntry}
 */
proto.MumbleProto.BanList.BanEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMask(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStart(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.BanList.BanEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.BanList.BanEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.BanList.BanEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.BanList.BanEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * required bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.MumbleProto.BanList.BanEntry.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.MumbleProto.BanList.BanEntry.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * required bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.MumbleProto.BanList.BanEntry.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MumbleProto.BanList.BanEntry} returns this
 */
proto.MumbleProto.BanList.BanEntry.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.BanList.BanEntry} returns this
 */
proto.MumbleProto.BanList.BanEntry.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.BanList.BanEntry.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 mask = 2;
 * @return {number}
 */
proto.MumbleProto.BanList.BanEntry.prototype.getMask = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.BanList.BanEntry} returns this
 */
proto.MumbleProto.BanList.BanEntry.prototype.setMask = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.BanList.BanEntry} returns this
 */
proto.MumbleProto.BanList.BanEntry.prototype.clearMask = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.BanList.BanEntry.prototype.hasMask = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.MumbleProto.BanList.BanEntry.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.BanList.BanEntry} returns this
 */
proto.MumbleProto.BanList.BanEntry.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.BanList.BanEntry} returns this
 */
proto.MumbleProto.BanList.BanEntry.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.BanList.BanEntry.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string hash = 4;
 * @return {string}
 */
proto.MumbleProto.BanList.BanEntry.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.BanList.BanEntry} returns this
 */
proto.MumbleProto.BanList.BanEntry.prototype.setHash = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.BanList.BanEntry} returns this
 */
proto.MumbleProto.BanList.BanEntry.prototype.clearHash = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.BanList.BanEntry.prototype.hasHash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string reason = 5;
 * @return {string}
 */
proto.MumbleProto.BanList.BanEntry.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.BanList.BanEntry} returns this
 */
proto.MumbleProto.BanList.BanEntry.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.BanList.BanEntry} returns this
 */
proto.MumbleProto.BanList.BanEntry.prototype.clearReason = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.BanList.BanEntry.prototype.hasReason = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string start = 6;
 * @return {string}
 */
proto.MumbleProto.BanList.BanEntry.prototype.getStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.BanList.BanEntry} returns this
 */
proto.MumbleProto.BanList.BanEntry.prototype.setStart = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.BanList.BanEntry} returns this
 */
proto.MumbleProto.BanList.BanEntry.prototype.clearStart = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.BanList.BanEntry.prototype.hasStart = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 duration = 7;
 * @return {number}
 */
proto.MumbleProto.BanList.BanEntry.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.BanList.BanEntry} returns this
 */
proto.MumbleProto.BanList.BanEntry.prototype.setDuration = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.BanList.BanEntry} returns this
 */
proto.MumbleProto.BanList.BanEntry.prototype.clearDuration = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.BanList.BanEntry.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated BanEntry bans = 1;
 * @return {!Array<!proto.MumbleProto.BanList.BanEntry>}
 */
proto.MumbleProto.BanList.prototype.getBansList = function() {
  return /** @type{!Array<!proto.MumbleProto.BanList.BanEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MumbleProto.BanList.BanEntry, 1));
};


/**
 * @param {!Array<!proto.MumbleProto.BanList.BanEntry>} value
 * @return {!proto.MumbleProto.BanList} returns this
*/
proto.MumbleProto.BanList.prototype.setBansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MumbleProto.BanList.BanEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.BanList.BanEntry}
 */
proto.MumbleProto.BanList.prototype.addBans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MumbleProto.BanList.BanEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.BanList} returns this
 */
proto.MumbleProto.BanList.prototype.clearBansList = function() {
  return this.setBansList([]);
};


/**
 * optional bool query = 2;
 * @return {boolean}
 */
proto.MumbleProto.BanList.prototype.getQuery = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.BanList} returns this
 */
proto.MumbleProto.BanList.prototype.setQuery = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.BanList} returns this
 */
proto.MumbleProto.BanList.prototype.clearQuery = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.BanList.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MumbleProto.TextMessage.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.TextMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.TextMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.TextMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.TextMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    actor: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sessionList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    channelIdList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    treeIdList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    message: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.TextMessage}
 */
proto.MumbleProto.TextMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.TextMessage;
  return proto.MumbleProto.TextMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.TextMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.TextMessage}
 */
proto.MumbleProto.TextMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addSession(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addChannelId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addTreeId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.TextMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.TextMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.TextMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.TextMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSessionList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      2,
      f
    );
  }
  f = message.getChannelIdList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      3,
      f
    );
  }
  f = message.getTreeIdList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 actor = 1;
 * @return {number}
 */
proto.MumbleProto.TextMessage.prototype.getActor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.TextMessage} returns this
 */
proto.MumbleProto.TextMessage.prototype.setActor = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.TextMessage} returns this
 */
proto.MumbleProto.TextMessage.prototype.clearActor = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.TextMessage.prototype.hasActor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint32 session = 2;
 * @return {!Array<number>}
 */
proto.MumbleProto.TextMessage.prototype.getSessionList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.TextMessage} returns this
 */
proto.MumbleProto.TextMessage.prototype.setSessionList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.TextMessage} returns this
 */
proto.MumbleProto.TextMessage.prototype.addSession = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.TextMessage} returns this
 */
proto.MumbleProto.TextMessage.prototype.clearSessionList = function() {
  return this.setSessionList([]);
};


/**
 * repeated uint32 channel_id = 3;
 * @return {!Array<number>}
 */
proto.MumbleProto.TextMessage.prototype.getChannelIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.TextMessage} returns this
 */
proto.MumbleProto.TextMessage.prototype.setChannelIdList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.TextMessage} returns this
 */
proto.MumbleProto.TextMessage.prototype.addChannelId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.TextMessage} returns this
 */
proto.MumbleProto.TextMessage.prototype.clearChannelIdList = function() {
  return this.setChannelIdList([]);
};


/**
 * repeated uint32 tree_id = 4;
 * @return {!Array<number>}
 */
proto.MumbleProto.TextMessage.prototype.getTreeIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.TextMessage} returns this
 */
proto.MumbleProto.TextMessage.prototype.setTreeIdList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.TextMessage} returns this
 */
proto.MumbleProto.TextMessage.prototype.addTreeId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.TextMessage} returns this
 */
proto.MumbleProto.TextMessage.prototype.clearTreeIdList = function() {
  return this.setTreeIdList([]);
};


/**
 * required string message = 5;
 * @return {string}
 */
proto.MumbleProto.TextMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.TextMessage} returns this
 */
proto.MumbleProto.TextMessage.prototype.setMessage = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.TextMessage} returns this
 */
proto.MumbleProto.TextMessage.prototype.clearMessage = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.TextMessage.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.PermissionDenied.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.PermissionDenied.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.PermissionDenied} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.PermissionDenied.toObject = function(includeInstance, msg) {
  var f, obj = {
    permission: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    channelId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    session: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    reason: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.PermissionDenied}
 */
proto.MumbleProto.PermissionDenied.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.PermissionDenied;
  return proto.MumbleProto.PermissionDenied.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.PermissionDenied} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.PermissionDenied}
 */
proto.MumbleProto.PermissionDenied.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPermission(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSession(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 5:
      var value = /** @type {!proto.MumbleProto.PermissionDenied.DenyType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.PermissionDenied.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.PermissionDenied.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.PermissionDenied} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.PermissionDenied.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {!proto.MumbleProto.PermissionDenied.DenyType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.MumbleProto.PermissionDenied.DenyType = {
  TEXT: 0,
  PERMISSION: 1,
  SUPERUSER: 2,
  CHANNELNAME: 3,
  TEXTTOOLONG: 4,
  H9K: 5,
  TEMPORARYCHANNEL: 6,
  MISSINGCERTIFICATE: 7,
  USERNAME: 8,
  CHANNELFULL: 9,
  NESTINGLIMIT: 10,
  CHANNELCOUNTLIMIT: 11
};

/**
 * optional uint32 permission = 1;
 * @return {number}
 */
proto.MumbleProto.PermissionDenied.prototype.getPermission = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.PermissionDenied} returns this
 */
proto.MumbleProto.PermissionDenied.prototype.setPermission = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.PermissionDenied} returns this
 */
proto.MumbleProto.PermissionDenied.prototype.clearPermission = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.PermissionDenied.prototype.hasPermission = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 channel_id = 2;
 * @return {number}
 */
proto.MumbleProto.PermissionDenied.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.PermissionDenied} returns this
 */
proto.MumbleProto.PermissionDenied.prototype.setChannelId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.PermissionDenied} returns this
 */
proto.MumbleProto.PermissionDenied.prototype.clearChannelId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.PermissionDenied.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 session = 3;
 * @return {number}
 */
proto.MumbleProto.PermissionDenied.prototype.getSession = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.PermissionDenied} returns this
 */
proto.MumbleProto.PermissionDenied.prototype.setSession = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.PermissionDenied} returns this
 */
proto.MumbleProto.PermissionDenied.prototype.clearSession = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.PermissionDenied.prototype.hasSession = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string reason = 4;
 * @return {string}
 */
proto.MumbleProto.PermissionDenied.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.PermissionDenied} returns this
 */
proto.MumbleProto.PermissionDenied.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.PermissionDenied} returns this
 */
proto.MumbleProto.PermissionDenied.prototype.clearReason = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.PermissionDenied.prototype.hasReason = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DenyType type = 5;
 * @return {!proto.MumbleProto.PermissionDenied.DenyType}
 */
proto.MumbleProto.PermissionDenied.prototype.getType = function() {
  return /** @type {!proto.MumbleProto.PermissionDenied.DenyType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.MumbleProto.PermissionDenied.DenyType} value
 * @return {!proto.MumbleProto.PermissionDenied} returns this
 */
proto.MumbleProto.PermissionDenied.prototype.setType = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.PermissionDenied} returns this
 */
proto.MumbleProto.PermissionDenied.prototype.clearType = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.PermissionDenied.prototype.hasType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.MumbleProto.PermissionDenied.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.PermissionDenied} returns this
 */
proto.MumbleProto.PermissionDenied.prototype.setName = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.PermissionDenied} returns this
 */
proto.MumbleProto.PermissionDenied.prototype.clearName = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.PermissionDenied.prototype.hasName = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MumbleProto.ACL.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.ACL.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.ACL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.ACL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ACL.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    inheritAcls: jspb.Message.getBooleanFieldWithDefault(msg, 2, true),
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.MumbleProto.ACL.ChanGroup.toObject, includeInstance),
    aclsList: jspb.Message.toObjectList(msg.getAclsList(),
    proto.MumbleProto.ACL.ChanACL.toObject, includeInstance),
    query: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.ACL}
 */
proto.MumbleProto.ACL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.ACL;
  return proto.MumbleProto.ACL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.ACL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.ACL}
 */
proto.MumbleProto.ACL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInheritAcls(value);
      break;
    case 3:
      var value = new proto.MumbleProto.ACL.ChanGroup;
      reader.readMessage(value,proto.MumbleProto.ACL.ChanGroup.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    case 4:
      var value = new proto.MumbleProto.ACL.ChanACL;
      reader.readMessage(value,proto.MumbleProto.ACL.ChanACL.deserializeBinaryFromReader);
      msg.addAcls(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.ACL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.ACL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.ACL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ACL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.MumbleProto.ACL.ChanGroup.serializeBinaryToWriter
    );
  }
  f = message.getAclsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.MumbleProto.ACL.ChanACL.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MumbleProto.ACL.ChanGroup.repeatedFields_ = [5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.ACL.ChanGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.ACL.ChanGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.ACL.ChanGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ACL.ChanGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    inherited: jspb.Message.getBooleanFieldWithDefault(msg, 2, true),
    inherit: jspb.Message.getBooleanFieldWithDefault(msg, 3, true),
    inheritable: jspb.Message.getBooleanFieldWithDefault(msg, 4, true),
    addList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    removeList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    inheritedMembersList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.ACL.ChanGroup}
 */
proto.MumbleProto.ACL.ChanGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.ACL.ChanGroup;
  return proto.MumbleProto.ACL.ChanGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.ACL.ChanGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.ACL.ChanGroup}
 */
proto.MumbleProto.ACL.ChanGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInherited(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInherit(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInheritable(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addAdd(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addRemove(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addInheritedMembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.ACL.ChanGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.ACL.ChanGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.ACL.ChanGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ACL.ChanGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAddList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      5,
      f
    );
  }
  f = message.getRemoveList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      6,
      f
    );
  }
  f = message.getInheritedMembersList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      7,
      f
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.MumbleProto.ACL.ChanGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanGroup.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool inherited = 2;
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanGroup.prototype.getInherited = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, true));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.setInherited = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.clearInherited = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanGroup.prototype.hasInherited = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool inherit = 3;
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanGroup.prototype.getInherit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, true));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.setInherit = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.clearInherit = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanGroup.prototype.hasInherit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool inheritable = 4;
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanGroup.prototype.getInheritable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, true));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.setInheritable = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.clearInheritable = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanGroup.prototype.hasInheritable = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated uint32 add = 5;
 * @return {!Array<number>}
 */
proto.MumbleProto.ACL.ChanGroup.prototype.getAddList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.setAddList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.addAdd = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.clearAddList = function() {
  return this.setAddList([]);
};


/**
 * repeated uint32 remove = 6;
 * @return {!Array<number>}
 */
proto.MumbleProto.ACL.ChanGroup.prototype.getRemoveList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.setRemoveList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.addRemove = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.clearRemoveList = function() {
  return this.setRemoveList([]);
};


/**
 * repeated uint32 inherited_members = 7;
 * @return {!Array<number>}
 */
proto.MumbleProto.ACL.ChanGroup.prototype.getInheritedMembersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.setInheritedMembersList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.addInheritedMembers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.ACL.ChanGroup} returns this
 */
proto.MumbleProto.ACL.ChanGroup.prototype.clearInheritedMembersList = function() {
  return this.setInheritedMembersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.ACL.ChanACL.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.ACL.ChanACL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.ACL.ChanACL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ACL.ChanACL.toObject = function(includeInstance, msg) {
  var f, obj = {
    applyHere: jspb.Message.getBooleanFieldWithDefault(msg, 1, true),
    applySubs: jspb.Message.getBooleanFieldWithDefault(msg, 2, true),
    inherited: jspb.Message.getBooleanFieldWithDefault(msg, 3, true),
    userId: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    group: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    grant: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    deny: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.ACL.ChanACL}
 */
proto.MumbleProto.ACL.ChanACL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.ACL.ChanACL;
  return proto.MumbleProto.ACL.ChanACL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.ACL.ChanACL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.ACL.ChanACL}
 */
proto.MumbleProto.ACL.ChanACL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyHere(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplySubs(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInherited(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroup(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGrant(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeny(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.ACL.ChanACL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.ACL.ChanACL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.ACL.ChanACL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ACL.ChanACL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional bool apply_here = 1;
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanACL.prototype.getApplyHere = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, true));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.ACL.ChanACL} returns this
 */
proto.MumbleProto.ACL.ChanACL.prototype.setApplyHere = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ACL.ChanACL} returns this
 */
proto.MumbleProto.ACL.ChanACL.prototype.clearApplyHere = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanACL.prototype.hasApplyHere = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool apply_subs = 2;
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanACL.prototype.getApplySubs = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, true));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.ACL.ChanACL} returns this
 */
proto.MumbleProto.ACL.ChanACL.prototype.setApplySubs = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ACL.ChanACL} returns this
 */
proto.MumbleProto.ACL.ChanACL.prototype.clearApplySubs = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanACL.prototype.hasApplySubs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool inherited = 3;
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanACL.prototype.getInherited = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, true));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.ACL.ChanACL} returns this
 */
proto.MumbleProto.ACL.ChanACL.prototype.setInherited = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ACL.ChanACL} returns this
 */
proto.MumbleProto.ACL.ChanACL.prototype.clearInherited = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanACL.prototype.hasInherited = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 user_id = 4;
 * @return {number}
 */
proto.MumbleProto.ACL.ChanACL.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ACL.ChanACL} returns this
 */
proto.MumbleProto.ACL.ChanACL.prototype.setUserId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ACL.ChanACL} returns this
 */
proto.MumbleProto.ACL.ChanACL.prototype.clearUserId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanACL.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string group = 5;
 * @return {string}
 */
proto.MumbleProto.ACL.ChanACL.prototype.getGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.ACL.ChanACL} returns this
 */
proto.MumbleProto.ACL.ChanACL.prototype.setGroup = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ACL.ChanACL} returns this
 */
proto.MumbleProto.ACL.ChanACL.prototype.clearGroup = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanACL.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 grant = 6;
 * @return {number}
 */
proto.MumbleProto.ACL.ChanACL.prototype.getGrant = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ACL.ChanACL} returns this
 */
proto.MumbleProto.ACL.ChanACL.prototype.setGrant = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ACL.ChanACL} returns this
 */
proto.MumbleProto.ACL.ChanACL.prototype.clearGrant = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanACL.prototype.hasGrant = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 deny = 7;
 * @return {number}
 */
proto.MumbleProto.ACL.ChanACL.prototype.getDeny = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ACL.ChanACL} returns this
 */
proto.MumbleProto.ACL.ChanACL.prototype.setDeny = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ACL.ChanACL} returns this
 */
proto.MumbleProto.ACL.ChanACL.prototype.clearDeny = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ACL.ChanACL.prototype.hasDeny = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 channel_id = 1;
 * @return {number}
 */
proto.MumbleProto.ACL.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ACL} returns this
 */
proto.MumbleProto.ACL.prototype.setChannelId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ACL} returns this
 */
proto.MumbleProto.ACL.prototype.clearChannelId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ACL.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool inherit_acls = 2;
 * @return {boolean}
 */
proto.MumbleProto.ACL.prototype.getInheritAcls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, true));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.ACL} returns this
 */
proto.MumbleProto.ACL.prototype.setInheritAcls = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ACL} returns this
 */
proto.MumbleProto.ACL.prototype.clearInheritAcls = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ACL.prototype.hasInheritAcls = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ChanGroup groups = 3;
 * @return {!Array<!proto.MumbleProto.ACL.ChanGroup>}
 */
proto.MumbleProto.ACL.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.MumbleProto.ACL.ChanGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MumbleProto.ACL.ChanGroup, 3));
};


/**
 * @param {!Array<!proto.MumbleProto.ACL.ChanGroup>} value
 * @return {!proto.MumbleProto.ACL} returns this
*/
proto.MumbleProto.ACL.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.MumbleProto.ACL.ChanGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.ACL.ChanGroup}
 */
proto.MumbleProto.ACL.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.MumbleProto.ACL.ChanGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.ACL} returns this
 */
proto.MumbleProto.ACL.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};


/**
 * repeated ChanACL acls = 4;
 * @return {!Array<!proto.MumbleProto.ACL.ChanACL>}
 */
proto.MumbleProto.ACL.prototype.getAclsList = function() {
  return /** @type{!Array<!proto.MumbleProto.ACL.ChanACL>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MumbleProto.ACL.ChanACL, 4));
};


/**
 * @param {!Array<!proto.MumbleProto.ACL.ChanACL>} value
 * @return {!proto.MumbleProto.ACL} returns this
*/
proto.MumbleProto.ACL.prototype.setAclsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.MumbleProto.ACL.ChanACL=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.ACL.ChanACL}
 */
proto.MumbleProto.ACL.prototype.addAcls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.MumbleProto.ACL.ChanACL, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.ACL} returns this
 */
proto.MumbleProto.ACL.prototype.clearAclsList = function() {
  return this.setAclsList([]);
};


/**
 * optional bool query = 5;
 * @return {boolean}
 */
proto.MumbleProto.ACL.prototype.getQuery = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.ACL} returns this
 */
proto.MumbleProto.ACL.prototype.setQuery = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ACL} returns this
 */
proto.MumbleProto.ACL.prototype.clearQuery = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ACL.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MumbleProto.QueryUsers.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.QueryUsers.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.QueryUsers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.QueryUsers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.QueryUsers.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    namesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.QueryUsers}
 */
proto.MumbleProto.QueryUsers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.QueryUsers;
  return proto.MumbleProto.QueryUsers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.QueryUsers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.QueryUsers}
 */
proto.MumbleProto.QueryUsers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addIds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.QueryUsers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.QueryUsers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.QueryUsers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.QueryUsers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
  f = message.getNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated uint32 ids = 1;
 * @return {!Array<number>}
 */
proto.MumbleProto.QueryUsers.prototype.getIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.QueryUsers} returns this
 */
proto.MumbleProto.QueryUsers.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.QueryUsers} returns this
 */
proto.MumbleProto.QueryUsers.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.QueryUsers} returns this
 */
proto.MumbleProto.QueryUsers.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};


/**
 * repeated string names = 2;
 * @return {!Array<string>}
 */
proto.MumbleProto.QueryUsers.prototype.getNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.MumbleProto.QueryUsers} returns this
 */
proto.MumbleProto.QueryUsers.prototype.setNamesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.QueryUsers} returns this
 */
proto.MumbleProto.QueryUsers.prototype.addNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.QueryUsers} returns this
 */
proto.MumbleProto.QueryUsers.prototype.clearNamesList = function() {
  return this.setNamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.CryptSetup.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.CryptSetup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.CryptSetup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.CryptSetup.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    clientNonce: msg.getClientNonce_asB64(),
    serverNonce: msg.getServerNonce_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.CryptSetup}
 */
proto.MumbleProto.CryptSetup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.CryptSetup;
  return proto.MumbleProto.CryptSetup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.CryptSetup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.CryptSetup}
 */
proto.MumbleProto.CryptSetup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientNonce(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setServerNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.CryptSetup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.CryptSetup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.CryptSetup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.CryptSetup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.MumbleProto.CryptSetup.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.MumbleProto.CryptSetup.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.MumbleProto.CryptSetup.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MumbleProto.CryptSetup} returns this
 */
proto.MumbleProto.CryptSetup.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.CryptSetup} returns this
 */
proto.MumbleProto.CryptSetup.prototype.clearKey = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.CryptSetup.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes client_nonce = 2;
 * @return {!(string|Uint8Array)}
 */
proto.MumbleProto.CryptSetup.prototype.getClientNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes client_nonce = 2;
 * This is a type-conversion wrapper around `getClientNonce()`
 * @return {string}
 */
proto.MumbleProto.CryptSetup.prototype.getClientNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientNonce()));
};


/**
 * optional bytes client_nonce = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientNonce()`
 * @return {!Uint8Array}
 */
proto.MumbleProto.CryptSetup.prototype.getClientNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MumbleProto.CryptSetup} returns this
 */
proto.MumbleProto.CryptSetup.prototype.setClientNonce = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.CryptSetup} returns this
 */
proto.MumbleProto.CryptSetup.prototype.clearClientNonce = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.CryptSetup.prototype.hasClientNonce = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes server_nonce = 3;
 * @return {!(string|Uint8Array)}
 */
proto.MumbleProto.CryptSetup.prototype.getServerNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes server_nonce = 3;
 * This is a type-conversion wrapper around `getServerNonce()`
 * @return {string}
 */
proto.MumbleProto.CryptSetup.prototype.getServerNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getServerNonce()));
};


/**
 * optional bytes server_nonce = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getServerNonce()`
 * @return {!Uint8Array}
 */
proto.MumbleProto.CryptSetup.prototype.getServerNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getServerNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MumbleProto.CryptSetup} returns this
 */
proto.MumbleProto.CryptSetup.prototype.setServerNonce = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.CryptSetup} returns this
 */
proto.MumbleProto.CryptSetup.prototype.clearServerNonce = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.CryptSetup.prototype.hasServerNonce = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.ContextActionModify.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.ContextActionModify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.ContextActionModify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ContextActionModify.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    text: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    context: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    operation: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.ContextActionModify}
 */
proto.MumbleProto.ContextActionModify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.ContextActionModify;
  return proto.MumbleProto.ContextActionModify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.ContextActionModify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.ContextActionModify}
 */
proto.MumbleProto.ContextActionModify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContext(value);
      break;
    case 4:
      var value = /** @type {!proto.MumbleProto.ContextActionModify.Operation} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.ContextActionModify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.ContextActionModify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.ContextActionModify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ContextActionModify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {!proto.MumbleProto.ContextActionModify.Operation} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.MumbleProto.ContextActionModify.Context = {
  SERVER: 1,
  CHANNEL: 2,
  USER: 4
};

/**
 * @enum {number}
 */
proto.MumbleProto.ContextActionModify.Operation = {
  ADD: 0,
  REMOVE: 1
};

/**
 * required string action = 1;
 * @return {string}
 */
proto.MumbleProto.ContextActionModify.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.ContextActionModify} returns this
 */
proto.MumbleProto.ContextActionModify.prototype.setAction = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ContextActionModify} returns this
 */
proto.MumbleProto.ContextActionModify.prototype.clearAction = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ContextActionModify.prototype.hasAction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.MumbleProto.ContextActionModify.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.ContextActionModify} returns this
 */
proto.MumbleProto.ContextActionModify.prototype.setText = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ContextActionModify} returns this
 */
proto.MumbleProto.ContextActionModify.prototype.clearText = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ContextActionModify.prototype.hasText = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 context = 3;
 * @return {number}
 */
proto.MumbleProto.ContextActionModify.prototype.getContext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ContextActionModify} returns this
 */
proto.MumbleProto.ContextActionModify.prototype.setContext = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ContextActionModify} returns this
 */
proto.MumbleProto.ContextActionModify.prototype.clearContext = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ContextActionModify.prototype.hasContext = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Operation operation = 4;
 * @return {!proto.MumbleProto.ContextActionModify.Operation}
 */
proto.MumbleProto.ContextActionModify.prototype.getOperation = function() {
  return /** @type {!proto.MumbleProto.ContextActionModify.Operation} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.MumbleProto.ContextActionModify.Operation} value
 * @return {!proto.MumbleProto.ContextActionModify} returns this
 */
proto.MumbleProto.ContextActionModify.prototype.setOperation = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ContextActionModify} returns this
 */
proto.MumbleProto.ContextActionModify.prototype.clearOperation = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ContextActionModify.prototype.hasOperation = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.ContextAction.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.ContextAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.ContextAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ContextAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    channelId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    action: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.ContextAction}
 */
proto.MumbleProto.ContextAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.ContextAction;
  return proto.MumbleProto.ContextAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.ContextAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.ContextAction}
 */
proto.MumbleProto.ContextAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSession(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.ContextAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.ContextAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.ContextAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ContextAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 session = 1;
 * @return {number}
 */
proto.MumbleProto.ContextAction.prototype.getSession = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ContextAction} returns this
 */
proto.MumbleProto.ContextAction.prototype.setSession = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ContextAction} returns this
 */
proto.MumbleProto.ContextAction.prototype.clearSession = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ContextAction.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 channel_id = 2;
 * @return {number}
 */
proto.MumbleProto.ContextAction.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ContextAction} returns this
 */
proto.MumbleProto.ContextAction.prototype.setChannelId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ContextAction} returns this
 */
proto.MumbleProto.ContextAction.prototype.clearChannelId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ContextAction.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string action = 3;
 * @return {string}
 */
proto.MumbleProto.ContextAction.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.ContextAction} returns this
 */
proto.MumbleProto.ContextAction.prototype.setAction = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ContextAction} returns this
 */
proto.MumbleProto.ContextAction.prototype.clearAction = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ContextAction.prototype.hasAction = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MumbleProto.UserList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.UserList.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.UserList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.UserList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.UserList.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.MumbleProto.UserList.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.UserList}
 */
proto.MumbleProto.UserList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.UserList;
  return proto.MumbleProto.UserList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.UserList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.UserList}
 */
proto.MumbleProto.UserList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MumbleProto.UserList.User;
      reader.readMessage(value,proto.MumbleProto.UserList.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.UserList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.UserList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.UserList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.UserList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.MumbleProto.UserList.User.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.UserList.User.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.UserList.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.UserList.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.UserList.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    lastSeen: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    lastChannel: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.UserList.User}
 */
proto.MumbleProto.UserList.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.UserList.User;
  return proto.MumbleProto.UserList.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.UserList.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.UserList.User}
 */
proto.MumbleProto.UserList.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastSeen(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.UserList.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.UserList.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.UserList.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.UserList.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 user_id = 1;
 * @return {number}
 */
proto.MumbleProto.UserList.User.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserList.User} returns this
 */
proto.MumbleProto.UserList.User.prototype.setUserId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserList.User} returns this
 */
proto.MumbleProto.UserList.User.prototype.clearUserId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserList.User.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.MumbleProto.UserList.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.UserList.User} returns this
 */
proto.MumbleProto.UserList.User.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserList.User} returns this
 */
proto.MumbleProto.UserList.User.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserList.User.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string last_seen = 3;
 * @return {string}
 */
proto.MumbleProto.UserList.User.prototype.getLastSeen = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.UserList.User} returns this
 */
proto.MumbleProto.UserList.User.prototype.setLastSeen = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserList.User} returns this
 */
proto.MumbleProto.UserList.User.prototype.clearLastSeen = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserList.User.prototype.hasLastSeen = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 last_channel = 4;
 * @return {number}
 */
proto.MumbleProto.UserList.User.prototype.getLastChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserList.User} returns this
 */
proto.MumbleProto.UserList.User.prototype.setLastChannel = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserList.User} returns this
 */
proto.MumbleProto.UserList.User.prototype.clearLastChannel = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserList.User.prototype.hasLastChannel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated User users = 1;
 * @return {!Array<!proto.MumbleProto.UserList.User>}
 */
proto.MumbleProto.UserList.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.MumbleProto.UserList.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MumbleProto.UserList.User, 1));
};


/**
 * @param {!Array<!proto.MumbleProto.UserList.User>} value
 * @return {!proto.MumbleProto.UserList} returns this
*/
proto.MumbleProto.UserList.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.MumbleProto.UserList.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.UserList.User}
 */
proto.MumbleProto.UserList.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MumbleProto.UserList.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.UserList} returns this
 */
proto.MumbleProto.UserList.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MumbleProto.VoiceTarget.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.VoiceTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.VoiceTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.VoiceTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.VoiceTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    targetsList: jspb.Message.toObjectList(msg.getTargetsList(),
    proto.MumbleProto.VoiceTarget.Target.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.VoiceTarget}
 */
proto.MumbleProto.VoiceTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.VoiceTarget;
  return proto.MumbleProto.VoiceTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.VoiceTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.VoiceTarget}
 */
proto.MumbleProto.VoiceTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.MumbleProto.VoiceTarget.Target;
      reader.readMessage(value,proto.MumbleProto.VoiceTarget.Target.deserializeBinaryFromReader);
      msg.addTargets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.VoiceTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.VoiceTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.VoiceTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.VoiceTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTargetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MumbleProto.VoiceTarget.Target.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MumbleProto.VoiceTarget.Target.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.VoiceTarget.Target.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.VoiceTarget.Target.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.VoiceTarget.Target} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.VoiceTarget.Target.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    channelId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    group: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    links: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    children: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.VoiceTarget.Target}
 */
proto.MumbleProto.VoiceTarget.Target.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.VoiceTarget.Target;
  return proto.MumbleProto.VoiceTarget.Target.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.VoiceTarget.Target} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.VoiceTarget.Target}
 */
proto.MumbleProto.VoiceTarget.Target.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addSession(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroup(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLinks(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.VoiceTarget.Target.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.VoiceTarget.Target.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.VoiceTarget.Target} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.VoiceTarget.Target.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * repeated uint32 session = 1;
 * @return {!Array<number>}
 */
proto.MumbleProto.VoiceTarget.Target.prototype.getSessionList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.VoiceTarget.Target} returns this
 */
proto.MumbleProto.VoiceTarget.Target.prototype.setSessionList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.VoiceTarget.Target} returns this
 */
proto.MumbleProto.VoiceTarget.Target.prototype.addSession = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.VoiceTarget.Target} returns this
 */
proto.MumbleProto.VoiceTarget.Target.prototype.clearSessionList = function() {
  return this.setSessionList([]);
};


/**
 * optional uint32 channel_id = 2;
 * @return {number}
 */
proto.MumbleProto.VoiceTarget.Target.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.VoiceTarget.Target} returns this
 */
proto.MumbleProto.VoiceTarget.Target.prototype.setChannelId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.VoiceTarget.Target} returns this
 */
proto.MumbleProto.VoiceTarget.Target.prototype.clearChannelId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.VoiceTarget.Target.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string group = 3;
 * @return {string}
 */
proto.MumbleProto.VoiceTarget.Target.prototype.getGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.VoiceTarget.Target} returns this
 */
proto.MumbleProto.VoiceTarget.Target.prototype.setGroup = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.VoiceTarget.Target} returns this
 */
proto.MumbleProto.VoiceTarget.Target.prototype.clearGroup = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.VoiceTarget.Target.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool links = 4;
 * @return {boolean}
 */
proto.MumbleProto.VoiceTarget.Target.prototype.getLinks = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.VoiceTarget.Target} returns this
 */
proto.MumbleProto.VoiceTarget.Target.prototype.setLinks = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.VoiceTarget.Target} returns this
 */
proto.MumbleProto.VoiceTarget.Target.prototype.clearLinks = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.VoiceTarget.Target.prototype.hasLinks = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool children = 5;
 * @return {boolean}
 */
proto.MumbleProto.VoiceTarget.Target.prototype.getChildren = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.VoiceTarget.Target} returns this
 */
proto.MumbleProto.VoiceTarget.Target.prototype.setChildren = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.VoiceTarget.Target} returns this
 */
proto.MumbleProto.VoiceTarget.Target.prototype.clearChildren = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.VoiceTarget.Target.prototype.hasChildren = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.MumbleProto.VoiceTarget.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.VoiceTarget} returns this
 */
proto.MumbleProto.VoiceTarget.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.VoiceTarget} returns this
 */
proto.MumbleProto.VoiceTarget.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.VoiceTarget.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Target targets = 2;
 * @return {!Array<!proto.MumbleProto.VoiceTarget.Target>}
 */
proto.MumbleProto.VoiceTarget.prototype.getTargetsList = function() {
  return /** @type{!Array<!proto.MumbleProto.VoiceTarget.Target>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MumbleProto.VoiceTarget.Target, 2));
};


/**
 * @param {!Array<!proto.MumbleProto.VoiceTarget.Target>} value
 * @return {!proto.MumbleProto.VoiceTarget} returns this
*/
proto.MumbleProto.VoiceTarget.prototype.setTargetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MumbleProto.VoiceTarget.Target=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.VoiceTarget.Target}
 */
proto.MumbleProto.VoiceTarget.prototype.addTargets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MumbleProto.VoiceTarget.Target, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.VoiceTarget} returns this
 */
proto.MumbleProto.VoiceTarget.prototype.clearTargetsList = function() {
  return this.setTargetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.PermissionQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.PermissionQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.PermissionQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.PermissionQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    permissions: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    flush: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.PermissionQuery}
 */
proto.MumbleProto.PermissionQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.PermissionQuery;
  return proto.MumbleProto.PermissionQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.PermissionQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.PermissionQuery}
 */
proto.MumbleProto.PermissionQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPermissions(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFlush(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.PermissionQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.PermissionQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.PermissionQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.PermissionQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint32 channel_id = 1;
 * @return {number}
 */
proto.MumbleProto.PermissionQuery.prototype.getChannelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.PermissionQuery} returns this
 */
proto.MumbleProto.PermissionQuery.prototype.setChannelId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.PermissionQuery} returns this
 */
proto.MumbleProto.PermissionQuery.prototype.clearChannelId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.PermissionQuery.prototype.hasChannelId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 permissions = 2;
 * @return {number}
 */
proto.MumbleProto.PermissionQuery.prototype.getPermissions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.PermissionQuery} returns this
 */
proto.MumbleProto.PermissionQuery.prototype.setPermissions = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.PermissionQuery} returns this
 */
proto.MumbleProto.PermissionQuery.prototype.clearPermissions = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.PermissionQuery.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool flush = 3;
 * @return {boolean}
 */
proto.MumbleProto.PermissionQuery.prototype.getFlush = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.PermissionQuery} returns this
 */
proto.MumbleProto.PermissionQuery.prototype.setFlush = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.PermissionQuery} returns this
 */
proto.MumbleProto.PermissionQuery.prototype.clearFlush = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.PermissionQuery.prototype.hasFlush = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.CodecVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.CodecVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.CodecVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.CodecVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    alpha: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    beta: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    preferAlpha: jspb.Message.getBooleanFieldWithDefault(msg, 3, true),
    opus: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.CodecVersion}
 */
proto.MumbleProto.CodecVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.CodecVersion;
  return proto.MumbleProto.CodecVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.CodecVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.CodecVersion}
 */
proto.MumbleProto.CodecVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAlpha(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBeta(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreferAlpha(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOpus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.CodecVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.CodecVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.CodecVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.CodecVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * required int32 alpha = 1;
 * @return {number}
 */
proto.MumbleProto.CodecVersion.prototype.getAlpha = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.CodecVersion} returns this
 */
proto.MumbleProto.CodecVersion.prototype.setAlpha = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.CodecVersion} returns this
 */
proto.MumbleProto.CodecVersion.prototype.clearAlpha = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.CodecVersion.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 beta = 2;
 * @return {number}
 */
proto.MumbleProto.CodecVersion.prototype.getBeta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.CodecVersion} returns this
 */
proto.MumbleProto.CodecVersion.prototype.setBeta = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.CodecVersion} returns this
 */
proto.MumbleProto.CodecVersion.prototype.clearBeta = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.CodecVersion.prototype.hasBeta = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool prefer_alpha = 3;
 * @return {boolean}
 */
proto.MumbleProto.CodecVersion.prototype.getPreferAlpha = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, true));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.CodecVersion} returns this
 */
proto.MumbleProto.CodecVersion.prototype.setPreferAlpha = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.CodecVersion} returns this
 */
proto.MumbleProto.CodecVersion.prototype.clearPreferAlpha = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.CodecVersion.prototype.hasPreferAlpha = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool opus = 4;
 * @return {boolean}
 */
proto.MumbleProto.CodecVersion.prototype.getOpus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.CodecVersion} returns this
 */
proto.MumbleProto.CodecVersion.prototype.setOpus = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.CodecVersion} returns this
 */
proto.MumbleProto.CodecVersion.prototype.clearOpus = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.CodecVersion.prototype.hasOpus = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MumbleProto.UserStats.repeatedFields_ = [3,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.UserStats.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.UserStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.UserStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.UserStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    statsOnly: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    certificatesList: msg.getCertificatesList_asB64(),
    fromClient: (f = msg.getFromClient()) && proto.MumbleProto.UserStats.Stats.toObject(includeInstance, f),
    fromServer: (f = msg.getFromServer()) && proto.MumbleProto.UserStats.Stats.toObject(includeInstance, f),
    udpPackets: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    tcpPackets: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    udpPingAvg: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    udpPingVar: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    tcpPingAvg: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    tcpPingVar: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    version: (f = msg.getVersion()) && proto.MumbleProto.Version.toObject(includeInstance, f),
    celtVersionsList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    address: msg.getAddress_asB64(),
    bandwidth: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
    onlinesecs: (f = jspb.Message.getField(msg, 16)) == null ? undefined : f,
    idlesecs: (f = jspb.Message.getField(msg, 17)) == null ? undefined : f,
    strongCertificate: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
    opus: jspb.Message.getBooleanFieldWithDefault(msg, 19, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.UserStats}
 */
proto.MumbleProto.UserStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.UserStats;
  return proto.MumbleProto.UserStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.UserStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.UserStats}
 */
proto.MumbleProto.UserStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSession(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatsOnly(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addCertificates(value);
      break;
    case 4:
      var value = new proto.MumbleProto.UserStats.Stats;
      reader.readMessage(value,proto.MumbleProto.UserStats.Stats.deserializeBinaryFromReader);
      msg.setFromClient(value);
      break;
    case 5:
      var value = new proto.MumbleProto.UserStats.Stats;
      reader.readMessage(value,proto.MumbleProto.UserStats.Stats.deserializeBinaryFromReader);
      msg.setFromServer(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUdpPackets(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpPackets(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUdpPingAvg(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUdpPingVar(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTcpPingAvg(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTcpPingVar(value);
      break;
    case 12:
      var value = new proto.MumbleProto.Version;
      reader.readMessage(value,proto.MumbleProto.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addCeltVersions(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBandwidth(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOnlinesecs(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdlesecs(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStrongCertificate(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOpus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.UserStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.UserStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.UserStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.UserStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCertificatesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
  f = message.getFromClient();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.MumbleProto.UserStats.Stats.serializeBinaryToWriter
    );
  }
  f = message.getFromServer();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.MumbleProto.UserStats.Stats.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.MumbleProto.Version.serializeBinaryToWriter
    );
  }
  f = message.getCeltVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      13,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeBool(
      19,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.UserStats.Stats.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.UserStats.Stats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.UserStats.Stats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.UserStats.Stats.toObject = function(includeInstance, msg) {
  var f, obj = {
    good: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    late: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    lost: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    resync: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.UserStats.Stats}
 */
proto.MumbleProto.UserStats.Stats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.UserStats.Stats;
  return proto.MumbleProto.UserStats.Stats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.UserStats.Stats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.UserStats.Stats}
 */
proto.MumbleProto.UserStats.Stats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGood(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLost(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResync(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.UserStats.Stats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.UserStats.Stats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.UserStats.Stats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.UserStats.Stats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 good = 1;
 * @return {number}
 */
proto.MumbleProto.UserStats.Stats.prototype.getGood = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserStats.Stats} returns this
 */
proto.MumbleProto.UserStats.Stats.prototype.setGood = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats.Stats} returns this
 */
proto.MumbleProto.UserStats.Stats.prototype.clearGood = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.Stats.prototype.hasGood = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 late = 2;
 * @return {number}
 */
proto.MumbleProto.UserStats.Stats.prototype.getLate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserStats.Stats} returns this
 */
proto.MumbleProto.UserStats.Stats.prototype.setLate = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats.Stats} returns this
 */
proto.MumbleProto.UserStats.Stats.prototype.clearLate = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.Stats.prototype.hasLate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 lost = 3;
 * @return {number}
 */
proto.MumbleProto.UserStats.Stats.prototype.getLost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserStats.Stats} returns this
 */
proto.MumbleProto.UserStats.Stats.prototype.setLost = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats.Stats} returns this
 */
proto.MumbleProto.UserStats.Stats.prototype.clearLost = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.Stats.prototype.hasLost = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 resync = 4;
 * @return {number}
 */
proto.MumbleProto.UserStats.Stats.prototype.getResync = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserStats.Stats} returns this
 */
proto.MumbleProto.UserStats.Stats.prototype.setResync = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats.Stats} returns this
 */
proto.MumbleProto.UserStats.Stats.prototype.clearResync = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.Stats.prototype.hasResync = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 session = 1;
 * @return {number}
 */
proto.MumbleProto.UserStats.prototype.getSession = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setSession = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearSession = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool stats_only = 2;
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.getStatsOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setStatsOnly = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearStatsOnly = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasStatsOnly = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated bytes certificates = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.MumbleProto.UserStats.prototype.getCertificatesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes certificates = 3;
 * This is a type-conversion wrapper around `getCertificatesList()`
 * @return {!Array<string>}
 */
proto.MumbleProto.UserStats.prototype.getCertificatesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getCertificatesList()));
};


/**
 * repeated bytes certificates = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCertificatesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.MumbleProto.UserStats.prototype.getCertificatesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getCertificatesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setCertificatesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.addCertificates = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearCertificatesList = function() {
  return this.setCertificatesList([]);
};


/**
 * optional Stats from_client = 4;
 * @return {?proto.MumbleProto.UserStats.Stats}
 */
proto.MumbleProto.UserStats.prototype.getFromClient = function() {
  return /** @type{?proto.MumbleProto.UserStats.Stats} */ (
    jspb.Message.getWrapperField(this, proto.MumbleProto.UserStats.Stats, 4));
};


/**
 * @param {?proto.MumbleProto.UserStats.Stats|undefined} value
 * @return {!proto.MumbleProto.UserStats} returns this
*/
proto.MumbleProto.UserStats.prototype.setFromClient = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearFromClient = function() {
  return this.setFromClient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasFromClient = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Stats from_server = 5;
 * @return {?proto.MumbleProto.UserStats.Stats}
 */
proto.MumbleProto.UserStats.prototype.getFromServer = function() {
  return /** @type{?proto.MumbleProto.UserStats.Stats} */ (
    jspb.Message.getWrapperField(this, proto.MumbleProto.UserStats.Stats, 5));
};


/**
 * @param {?proto.MumbleProto.UserStats.Stats|undefined} value
 * @return {!proto.MumbleProto.UserStats} returns this
*/
proto.MumbleProto.UserStats.prototype.setFromServer = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearFromServer = function() {
  return this.setFromServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasFromServer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 udp_packets = 6;
 * @return {number}
 */
proto.MumbleProto.UserStats.prototype.getUdpPackets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setUdpPackets = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearUdpPackets = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasUdpPackets = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 tcp_packets = 7;
 * @return {number}
 */
proto.MumbleProto.UserStats.prototype.getTcpPackets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setTcpPackets = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearTcpPackets = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasTcpPackets = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float udp_ping_avg = 8;
 * @return {number}
 */
proto.MumbleProto.UserStats.prototype.getUdpPingAvg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setUdpPingAvg = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearUdpPingAvg = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasUdpPingAvg = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float udp_ping_var = 9;
 * @return {number}
 */
proto.MumbleProto.UserStats.prototype.getUdpPingVar = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setUdpPingVar = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearUdpPingVar = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasUdpPingVar = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float tcp_ping_avg = 10;
 * @return {number}
 */
proto.MumbleProto.UserStats.prototype.getTcpPingAvg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setTcpPingAvg = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearTcpPingAvg = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasTcpPingAvg = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float tcp_ping_var = 11;
 * @return {number}
 */
proto.MumbleProto.UserStats.prototype.getTcpPingVar = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setTcpPingVar = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearTcpPingVar = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasTcpPingVar = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Version version = 12;
 * @return {?proto.MumbleProto.Version}
 */
proto.MumbleProto.UserStats.prototype.getVersion = function() {
  return /** @type{?proto.MumbleProto.Version} */ (
    jspb.Message.getWrapperField(this, proto.MumbleProto.Version, 12));
};


/**
 * @param {?proto.MumbleProto.Version|undefined} value
 * @return {!proto.MumbleProto.UserStats} returns this
*/
proto.MumbleProto.UserStats.prototype.setVersion = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearVersion = function() {
  return this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated int32 celt_versions = 13;
 * @return {!Array<number>}
 */
proto.MumbleProto.UserStats.prototype.getCeltVersionsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setCeltVersionsList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.addCeltVersions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearCeltVersionsList = function() {
  return this.setCeltVersionsList([]);
};


/**
 * optional bytes address = 14;
 * @return {!(string|Uint8Array)}
 */
proto.MumbleProto.UserStats.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes address = 14;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.MumbleProto.UserStats.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.MumbleProto.UserStats.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint32 bandwidth = 15;
 * @return {number}
 */
proto.MumbleProto.UserStats.prototype.getBandwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setBandwidth = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearBandwidth = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasBandwidth = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional uint32 onlinesecs = 16;
 * @return {number}
 */
proto.MumbleProto.UserStats.prototype.getOnlinesecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setOnlinesecs = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearOnlinesecs = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasOnlinesecs = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional uint32 idlesecs = 17;
 * @return {number}
 */
proto.MumbleProto.UserStats.prototype.getIdlesecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setIdlesecs = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearIdlesecs = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasIdlesecs = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool strong_certificate = 18;
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.getStrongCertificate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setStrongCertificate = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearStrongCertificate = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasStrongCertificate = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional bool opus = 19;
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.getOpus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.setOpus = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.UserStats} returns this
 */
proto.MumbleProto.UserStats.prototype.clearOpus = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.UserStats.prototype.hasOpus = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MumbleProto.RequestBlob.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.RequestBlob.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.RequestBlob.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.RequestBlob} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.RequestBlob.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionTextureList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    sessionCommentList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    channelDescriptionList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.RequestBlob}
 */
proto.MumbleProto.RequestBlob.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.RequestBlob;
  return proto.MumbleProto.RequestBlob.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.RequestBlob} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.RequestBlob}
 */
proto.MumbleProto.RequestBlob.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addSessionTexture(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addSessionComment(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addChannelDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.RequestBlob.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.RequestBlob.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.RequestBlob} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.RequestBlob.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionTextureList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
  f = message.getSessionCommentList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      2,
      f
    );
  }
  f = message.getChannelDescriptionList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      3,
      f
    );
  }
};


/**
 * repeated uint32 session_texture = 1;
 * @return {!Array<number>}
 */
proto.MumbleProto.RequestBlob.prototype.getSessionTextureList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.RequestBlob} returns this
 */
proto.MumbleProto.RequestBlob.prototype.setSessionTextureList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.RequestBlob} returns this
 */
proto.MumbleProto.RequestBlob.prototype.addSessionTexture = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.RequestBlob} returns this
 */
proto.MumbleProto.RequestBlob.prototype.clearSessionTextureList = function() {
  return this.setSessionTextureList([]);
};


/**
 * repeated uint32 session_comment = 2;
 * @return {!Array<number>}
 */
proto.MumbleProto.RequestBlob.prototype.getSessionCommentList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.RequestBlob} returns this
 */
proto.MumbleProto.RequestBlob.prototype.setSessionCommentList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.RequestBlob} returns this
 */
proto.MumbleProto.RequestBlob.prototype.addSessionComment = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.RequestBlob} returns this
 */
proto.MumbleProto.RequestBlob.prototype.clearSessionCommentList = function() {
  return this.setSessionCommentList([]);
};


/**
 * repeated uint32 channel_description = 3;
 * @return {!Array<number>}
 */
proto.MumbleProto.RequestBlob.prototype.getChannelDescriptionList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.MumbleProto.RequestBlob} returns this
 */
proto.MumbleProto.RequestBlob.prototype.setChannelDescriptionList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.MumbleProto.RequestBlob} returns this
 */
proto.MumbleProto.RequestBlob.prototype.addChannelDescription = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MumbleProto.RequestBlob} returns this
 */
proto.MumbleProto.RequestBlob.prototype.clearChannelDescriptionList = function() {
  return this.setChannelDescriptionList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.ServerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.ServerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.ServerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ServerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxBandwidth: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    welcomeText: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    allowHtml: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    messageLength: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    imageMessageLength: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    maxUsers: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.ServerConfig}
 */
proto.MumbleProto.ServerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.ServerConfig;
  return proto.MumbleProto.ServerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.ServerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.ServerConfig}
 */
proto.MumbleProto.ServerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxBandwidth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWelcomeText(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowHtml(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMessageLength(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setImageMessageLength(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.ServerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.ServerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.ServerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.ServerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 max_bandwidth = 1;
 * @return {number}
 */
proto.MumbleProto.ServerConfig.prototype.getMaxBandwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ServerConfig} returns this
 */
proto.MumbleProto.ServerConfig.prototype.setMaxBandwidth = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ServerConfig} returns this
 */
proto.MumbleProto.ServerConfig.prototype.clearMaxBandwidth = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ServerConfig.prototype.hasMaxBandwidth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string welcome_text = 2;
 * @return {string}
 */
proto.MumbleProto.ServerConfig.prototype.getWelcomeText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MumbleProto.ServerConfig} returns this
 */
proto.MumbleProto.ServerConfig.prototype.setWelcomeText = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ServerConfig} returns this
 */
proto.MumbleProto.ServerConfig.prototype.clearWelcomeText = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ServerConfig.prototype.hasWelcomeText = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool allow_html = 3;
 * @return {boolean}
 */
proto.MumbleProto.ServerConfig.prototype.getAllowHtml = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.ServerConfig} returns this
 */
proto.MumbleProto.ServerConfig.prototype.setAllowHtml = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ServerConfig} returns this
 */
proto.MumbleProto.ServerConfig.prototype.clearAllowHtml = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ServerConfig.prototype.hasAllowHtml = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 message_length = 4;
 * @return {number}
 */
proto.MumbleProto.ServerConfig.prototype.getMessageLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ServerConfig} returns this
 */
proto.MumbleProto.ServerConfig.prototype.setMessageLength = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ServerConfig} returns this
 */
proto.MumbleProto.ServerConfig.prototype.clearMessageLength = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ServerConfig.prototype.hasMessageLength = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 image_message_length = 5;
 * @return {number}
 */
proto.MumbleProto.ServerConfig.prototype.getImageMessageLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ServerConfig} returns this
 */
proto.MumbleProto.ServerConfig.prototype.setImageMessageLength = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ServerConfig} returns this
 */
proto.MumbleProto.ServerConfig.prototype.clearImageMessageLength = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ServerConfig.prototype.hasImageMessageLength = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 max_users = 6;
 * @return {number}
 */
proto.MumbleProto.ServerConfig.prototype.getMaxUsers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.ServerConfig} returns this
 */
proto.MumbleProto.ServerConfig.prototype.setMaxUsers = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.ServerConfig} returns this
 */
proto.MumbleProto.ServerConfig.prototype.clearMaxUsers = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.ServerConfig.prototype.hasMaxUsers = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MumbleProto.SuggestConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.MumbleProto.SuggestConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MumbleProto.SuggestConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.SuggestConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    positional: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    pushToTalk: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MumbleProto.SuggestConfig}
 */
proto.MumbleProto.SuggestConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MumbleProto.SuggestConfig;
  return proto.MumbleProto.SuggestConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MumbleProto.SuggestConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MumbleProto.SuggestConfig}
 */
proto.MumbleProto.SuggestConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPositional(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPushToTalk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MumbleProto.SuggestConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MumbleProto.SuggestConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MumbleProto.SuggestConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MumbleProto.SuggestConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.MumbleProto.SuggestConfig.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MumbleProto.SuggestConfig} returns this
 */
proto.MumbleProto.SuggestConfig.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.SuggestConfig} returns this
 */
proto.MumbleProto.SuggestConfig.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.SuggestConfig.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool positional = 2;
 * @return {boolean}
 */
proto.MumbleProto.SuggestConfig.prototype.getPositional = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.SuggestConfig} returns this
 */
proto.MumbleProto.SuggestConfig.prototype.setPositional = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.SuggestConfig} returns this
 */
proto.MumbleProto.SuggestConfig.prototype.clearPositional = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.SuggestConfig.prototype.hasPositional = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool push_to_talk = 3;
 * @return {boolean}
 */
proto.MumbleProto.SuggestConfig.prototype.getPushToTalk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MumbleProto.SuggestConfig} returns this
 */
proto.MumbleProto.SuggestConfig.prototype.setPushToTalk = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MumbleProto.SuggestConfig} returns this
 */
proto.MumbleProto.SuggestConfig.prototype.clearPushToTalk = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MumbleProto.SuggestConfig.prototype.hasPushToTalk = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.MumbleProto);
